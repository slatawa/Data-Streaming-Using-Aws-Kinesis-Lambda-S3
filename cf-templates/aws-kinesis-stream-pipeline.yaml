AWSTemplateFormatVersion: 2010-09-09
Description: "Buckets creation"

Parameters:
  CodeBucketName:
    Type: String
    Default: 'sl-code-bucket'
  FailedBucketName:
    Type: String
    Default: 'sl-failed-data-bucket'
  IncomingDataBucketName:
    Type: String
    Default: 'sl-incoming-data-bucket'
  VpcId:
    Type: String
    Default: 'vpc-xyz'
  RoleName:
    Type: String
    Default: 'sl-incoming-stream-role'
  PolicyName:
    Type: String
    Default: 'sl-incoming-stream-policy'
  EnvName:
    Type: String
    Default: 'test'
  KinesisStreamName:
    Type: String
    Default: 'sl-incoming-kinesis-stream'
  KinesisShardsCount:
    Type: String
    Default: 1
  KinesisDataRetainHours:
    Type: String
    Default: 48
  LmdConsumer:
    Type: String
    Default: 'stream-lambda-consumer'
  LmdConsumerDesc:
    Type: String
    Default: 'Lambda Consumer function'
  LambdaTimeout:
    Type: String
    Default: 60
  LambdaRuntime:
    Type: String
    Default: 'python3.6'
  LambdaMemorySize:
    Type: String
    Default: 256
  ConsumerLambdaHandler:
    Type: String
    Default: 'stream-lambda-consumer.lambda_handler'
  LambdaConsumerCode:
    Type: String
    Default: 'scripts/stream-lambda-consumer.zip'
Resources:

  FailedBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        !Ref FailedBucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      VersioningConfiguration:
        Status: Enabled

  FailedBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    DependsOn: [ FailedBucket ]
    Properties:
      Bucket: !Ref FailedBucketName
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${FailedBucketName}'
              - !Sub 'arn:aws:s3:::${FailedBucketName}/*'
            Principal: '*'
            Condition:
              StringEquals:
                'aws:sourceVpc':
                  - !Ref VpcId
        
  IncomingDataBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName:
        !Ref IncomingDataBucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      VersioningConfiguration:
        Status: Enabled
     
  IncomingBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    DependsOn: [ IncomingDataBucket ]
    Properties:
      Bucket: !Ref IncomingDataBucketName
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetObject'
              - 's3:PutBucketNotification'
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${IncomingDataBucketName}'
              - !Sub 'arn:aws:s3:::${IncomingDataBucketName}/*'
            Principal: '*'
            Condition:
              StringEquals:
                'aws:sourceVpc':
                  - !Ref VpcId
    
  StreamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref RoleName
      Description: Stream Role Name
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'

  StreamPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    DependsOn: [ StreamRole ]
    Properties:
      Description: Stream Policy Name
      ManagedPolicyName: !Ref PolicyName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: S3BasedActions
            Effect: Allow
            Action:
              - 's3:CreateBucket'
              - 's3:ListBucket'
              - 's3:PutObject'
              - 's3:GetObject'
            Resource: 
              - !Sub 'arn:aws:s3:::*'
              - !Sub 'arn:aws:s3:::*/*'
          - Sid: LogBasedActions
            Effect: Allow
            Action:
              - 'logs:ListTagsLogGroup'
              - 'logs:GetLogRecord'
              - 'cloudwatch:PutMetricData'
              - 'logs:DescribeLogStreams'
              - 'logs:DescribeSubscriptionFilters'
              - 'logs:StartQuery'
              - 'logs:DescribeMetricFilters'
              - 'logs:GetLogDelivery'
              - 'logs:ListLogDeliveries'
              - 'logs:CreateLogStream'
              - 'logs:GetLogEvents'
              - 'logs:AssociateKmsKey'
              - 'logs:FilterLogEvents'
              - 'logs:DescribeResourcePolicies'
              - 'logs:DescribeDestinations'
              - 'logs:DescribeQueries'
              - 'logs:DescribeLogGroups'
              - 'logs:StopQuery'
              - 'logs:TestMetricFilter'
              - 'logs:CreateLogGroup'
              - 'logs:PutLogEvents'
              - 'logs:DescribeExportTasks'
              - 'logs:GetQueryResults'
              - 'logs:GetLogGroupFields'
            Resource: '*'
          - Sid: LambdaBasedActions
            Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
              - 'lambda:PublishVersion'
            Resource: 
              - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:function:*'
          - Sid: KinesisBasedActions
            Effect: Allow
            Action:
              - 'kinesis:SubscribeToShard'
              - 'kinesis:DescribeStreamSummary'
              - 'kinesis:DescribeStreamConsumer'
              - 'kinesis:GetShardIterator'
              - 'kinesis:GetRecords'
              - 'kinesis:DescribeStream'
              - 'kinesis:ListTagsForStream'
            Resource: '*'
      Roles:
        - !Ref RoleName
        
  KinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name:
        !Ref KinesisStreamName
      RetentionPeriodHours: !Ref KinesisDataRetainHours
      ShardCount: !Ref KinesisShardsCount

  LambdaConsumer:
    Type: AWS::Lambda::Function
    DependsOn: [ StreamRole, KinesisStream ]
    Properties:
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${RoleName}
      FunctionName: !Ref LmdConsumer
      Description: !Ref LmdConsumerDesc
      Environment:
        Variables:
          databucket: !Ref IncomingDataBucketName
          failedbucket: !Ref FailedBucketName
      Timeout: !Ref LambdaTimeout
      Handler: !Ref ConsumerLambdaHandler
      Runtime: !Ref LambdaRuntime
      MemorySize: !Ref LambdaMemorySize
      Code:
        S3Bucket: !Ref CodeBucketName
        S3Key: !Ref LambdaConsumerCode
      
  LambdaKinesisMapping:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn: [ LambdaConsumer, KinesisStream ]
    Properties:
      EventSourceArn: !GetAtt KinesisStream.Arn
      FunctionName: !Ref LmdConsumer
      StartingPosition: LATEST
      BatchSize: 100
      MaximumBatchingWindowInSeconds: 30
 